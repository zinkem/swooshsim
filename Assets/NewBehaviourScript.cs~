using UnityEngine;
using System.Collections;
using System;


public class NewBehaviourScript : MonoBehaviour {

  public Sprite facing_u90;
  public Sprite facing_u60;
  public Sprite facing_u30;
  public Sprite facing_0;
  public Sprite facing_d30;
  public Sprite facing_d60;

  private Sprite[] sprite_array;


  private SpriteRenderer sr;

  private float orientation;

	// Use this for initialization
	void Start () {
    sr = GetComponent<SpriteRenderer>();
    orientation = 0f;
	  sr.sprite = facing_0;

    sprite_array = new Sprite[12];

    sprite_array[0] = facing_0;
    sprite_array[1] = facing_u30;
    sprite_array[2] = facing_u60;
    sprite_array[3] = facing_u90;
    sprite_array[4] = facing_u60;
    sprite_array[5] = facing_u30;
    sprite_array[6] = facing_0;
    sprite_array[7] = facing_d30;
    sprite_array[8] = facing_d60;
    sprite_array[9] = facing_u90;
    sprite_array[10] = facing_d60;
    sprite_array[11] = facing_d30;
	}
	
	// Update is called once per frame
	void Update () {

	  float move = Input.GetAxis("Horizontal");
    float thrust = Input.GetAxis("Vertical");

    float angle;
    int angle_index;

    orientation -= (move*3);

    while ( orientation < 0 )
      orientation+= 360;
    while ( orientation > 360 )
      orientation-= 360;

    angle_index = (int)((orientation + 15)/30);
    angle_index %= 12;

    Console.Write(angle_index + " " + orientation);

    sr.sprite = sprite_array[angle_index];

    if( angle_index > 3 && angle_index < 9 ){
      if( transform.localScale.x > 0)
        flipx();
      if( transform.localScale.y < 0)
        flipy();  
    } else if ( angle_index == 9 ){
      if( transform.localScale.y > 0)
        flipy();
    } else {
      if( transform.localScale.x < 0)
        flipx();
      if( transform.localScale.y < 0)
        flipy();
    }

    float rads = (float)(orientation * Math.PI / 180);

    float friction = .9f;

    if( thrust > 0 ){
      float dx = friction*rigidbody2D.velocity.x + (float)Math.Cos(rads);
      float dy = (friction*rigidbody2D.velocity.y + (float)Math.Sin(rads));// - 1.5f;
      rigidbody2D.velocity = new Vector2 (dx , dy );
    }


    /*
    float friction = .9f;

    float dx = friction*rigidbody2D.velocity.x + move;
    float dy = (friction*rigidbody2D.velocity.y + thrust*3f) - 1.5f;


    rigidbody2D.velocity = new Vector2 (dx , dy );
    */
	}

  void flipx(){
    Vector3 theScale = transform.localScale;
    theScale.x *= -1;
    transform.localScale = theScale;
  }

  void flipy(){
    Vector3 theScale = transform.localScale;
    theScale.y *= -1;
    transform.localScale = theScale;
  }

}
